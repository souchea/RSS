@{ Layout = ""; }

@{
    ViewBag.Title = "Log in";
}
@using RSSAgregator.Web.Models

@model LoginPageViewModel

<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
    
    <title>@ViewBag.Title</title>

    <link rel="stylesheet" type="text/css" href="~/Content/login/css/normalize.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/login/css/demo.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/login/css/component.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/login/css/content.css" />
    <script src="~/Scripts/login/js/modernizr.custom.js"></script>
</head>
<body>
    <div class="container">

        <section>
            <p><strong>RSS</strong> Feed Aggregator</p>
            <div class="mockup-content">
                <p>Pea horseradish azuki bean lettuce avocado asparagus okra.</p>
                <div class="morph-button morph-button-modal login morph-button-modal-2 morph-button-fixed">
                    <button type="button">Login</button>
                    <div class="morph-content">
                        <div>
                            <div class="content-style-form content-style-form-1">
                                <span class="icon icon-close">Close the dialog</span>
                                <h2>Login</h2>
                                @*<form>
                                    <p><label>Email</label><input type="text" /></p>
                                    <p><label>Password</label><input type="password" /></p>
                                    <p><button>Login</button></p>
                                    <p><button>Login With Twitter</button></p>
                                    <p><button>Login With Facebook</button></p>
                                    <p><button>Login With Google+</button></p>
                                </form>*@
                                   @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                                   {
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                    <p>@Html.LabelFor(m => m.Login.Email) @Html.TextBoxFor(m => m.Login.Email)</p>
                                    @Html.ValidationMessageFor(m => m.Login.Email, "", new { @class = "text-danger" })
                                    <p>@Html.LabelFor(m => m.Login.Password) @Html.PasswordFor(m => m.Login.Password)</p>
                                    @Html.ValidationMessageFor(m => m.Login.Password, "", new { @class = "text-danger" })
                                    <p>


                                        @Html.LabelFor(m => m.Login.RememberMe)
                                        @Html.CheckBoxFor(m => m.Login.RememberMe)
                                    </p>
                                    <p><input type="submit" value="Log in" class="btn btn-default" /></p>

                                   }
                                
                                

                            </div>
                        </div>
                    </div>
                </div><!-- morph-button -->
                <strong class="joiner">or</strong>
                <div class="morph-button morph-button-modal signup morph-button-modal-3 morph-button-fixed">
                    <button type="button">Signup</button>
                    <div class="morph-content">
                        <div>
                            <div class="content-style-form content-style-form-2">
                                <span class="icon icon-close">Close the dialog</span>
                                <h2>Sign Up</h2>
                                @*<form>
                                    <p><label>Email</label><input type="text" /></p>
                                    <p><label>Password</label><input type="password" /></p>
                                    <p><label>Repeat Password</label><input type="password" /></p>
                                    <p><button>Sign Up</button></p>
                                </form>*@
                              
                                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                                {
                                    @Html.AntiForgeryToken()

                                    @Html.ValidationSummary("", new { @class = "text-danger" })

                                    <p>@Html.LabelFor(m => m.Register.Email) @Html.TextBoxFor(m => m.Register.Email)</p>
                                    <p>
                                        @Html.LabelFor(m => m.Register.Password)
                                        @Html.PasswordFor(m => m.Register.Password)
                                    </p>
                                    <p>
                                        @Html.LabelFor(m => m.Register.ConfirmPassword)
                                        @Html.PasswordFor(m => m.Register.ConfirmPassword)
                                    </p>
                                    <p><input type="submit" class="btn btn-default" value="Register" /></p>

                                }

                            </div>
                        </div>
                    </div>
                </div><!-- morph-button -->
                <p>Kohlrabi radish okra azuki bean corn fava bean mustard tigernut</p>
            </div><!-- /form-mockup -->
        </section>

    </div><!-- /container -->
    <script src="~/Scripts/login/js/classie.js"></script>
    <script src="~/Scripts/login/js/uiMorphingButton_fixed.js"></script>
    <script>
			(function() {
				var docElem = window.document.documentElement, didScroll, scrollPosition;

				// trick to prevent scrolling when opening/closing button
				function noScrollFn() {
					window.scrollTo( scrollPosition ? scrollPosition.x : 0, scrollPosition ? scrollPosition.y : 0 );
				}

				function noScroll() {
					window.removeEventListener( 'scroll', scrollHandler );
					window.addEventListener( 'scroll', noScrollFn );
				}

				function scrollFn() {
					window.addEventListener( 'scroll', scrollHandler );
				}

				function canScroll() {
					window.removeEventListener( 'scroll', noScrollFn );
					scrollFn();
				}

				function scrollHandler() {
					if( !didScroll ) {
						didScroll = true;
						setTimeout( function() { scrollPage(); }, 60 );
					}
				};

				function scrollPage() {
					scrollPosition = { x : window.pageXOffset || docElem.scrollLeft, y : window.pageYOffset || docElem.scrollTop };
					didScroll = false;
				};

				scrollFn();

				[].slice.call( document.querySelectorAll( '.morph-button' ) ).forEach( function( bttn ) {
					new UIMorphingButton( bttn, {
						closeEl : '.icon-close',
						onBeforeOpen : function() {
							// don't allow to scroll
							noScroll();
						},
						onAfterOpen : function() {
							// can scroll again
							canScroll();
						},
						onBeforeClose : function() {
							// don't allow to scroll
							noScroll();
						},
						onAfterClose : function() {
							// can scroll again
							canScroll();
						}
					} );
				} );

				// for demo purposes only
				[].slice.call( document.querySelectorAll( 'form button' ) ).forEach( function( bttn ) {
					bttn.addEventListener( 'click', function( ev ) { ev.preventDefault(); } );
				} );
			})();
    </script>
</body>
</html>